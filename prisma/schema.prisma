// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  orders        Order[]
  reviews       Review[]
  wishlist      WishlistItem[]
  addresses     Address[]
}

enum Role {
  USER
  ADMIN
}

// Product model
model Product {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  description   String
  price         Int
  originalPrice Int?
  images        ProductImage[]
  categoryId    String
  category      Category  @relation(fields: [categoryId], references: [id])
  featured      Boolean   @default(false)
  inStock       Boolean   @default(true)
  stockQuantity Int       @default(0)
  sku           String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  orderItems    OrderItem[]
  cartItems     CartItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
  attributes    ProductAttribute[]
  variants      ProductVariant[]
}

// Product Image model
model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Category model
model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  image       String?
  parentId    String?
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// Order model
model Order {
  id              String     @id @default(cuid())
  userId          String?
  user            User?      @relation(fields: [userId], references: [id])
  orderNumber     String     @unique
  status          OrderStatus @default(PENDING)
  items           OrderItem[]
  subtotal        Int
  tax             Int
  shipping        Int
  total           Int
  shippingAddress Json
  billingAddress  Json?
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  notes           String?
  trackingNumber  String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Order Item model
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  name      String
  price     Int
  quantity  Int
  variant   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Cart model
model Cart {
  id        String     @id @default(cuid())
  sessionId String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Cart Item model
model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  variant   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Review model
model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  title     String?
  content   String
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Wishlist Item model
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

// Address model
model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  street    String
  city      String
  state     String
  zip       String
  country   String
  phone     String
  isDefault Boolean  @default(false)
  type      AddressType @default(SHIPPING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

// Product Attribute model
model ProductAttribute {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, name])
}

// Product Variant model
model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String
  sku       String?  @unique
  price     Int
  stockQuantity Int  @default(0)
  attributes Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Settings model for store configuration
model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

